{"version":3,"sources":["webpack:///path---leveling-up-your-dotnet-testing-4fc04dcfb4e8dbde8faa.js","webpack:///./.cache/json/leveling-up-your-dotnet-testing.json"],"names":["webpackJsonp","524","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,WAAAC,OAAA,gBAA2CC,gBAAmBC,GAAA,0HAAAC,KAAA,s61BAAq/0BC,aAA8iDL,MAAA,kDAAAM,KAAA,oBAAoFC,aAAgBC,KAAA,oCAAAC,UAAuDC,QAAUF,KAAA,kCAAwCH,aAAgBL,MAAA,iCAAwCW,MAASD,QAAUF,KAAA,mCAAyCH,aAAgBL,MAAA","file":"path---leveling-up-your-dotnet-testing-4fc04dcfb4e8dbde8faa.js","sourcesContent":["webpackJsonp([163616910017581],{\n\n/***/ 524:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"nance.io\",\"author\":\"Jared Nance\"}},\"markdownRemark\":{\"id\":\"/Users/jarednance/dev/gatsby-blog/src/pages/leveling-up-your-dotnet-testing/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This is a two part blog post in which I’ll describe some techniques you can use to level up your .Net tests.\\nIn part 1 of this series, I’m going to show you how to use model Factories to generate data and introduce entropy\\ninto your tests.</p>\\n<h2>Factories</h2>\\n<p>If you’re not familiar with factories, they are a simple <a href=\\\"https://en.wikipedia.org/wiki/Creational_pattern\\\">creational pattern</a>\\nthat abstract the instantiation process of a type. The simplest form a factory can take is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BeerFactory</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> Beer <span class=\\\"token function\\\">Create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Beer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The most common use of Factories is to provide a mechanism for the instantiation of different implementations of an\\ninterface that is dependent upon some runtime condition. Often times this takes the form of a switch statement:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BeerFactory</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> IBeer <span class=\\\"token function\\\">Create</span><span class=\\\"token punctuation\\\">(</span>BeerType beerType<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>beerType<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">case</span> BeerType<span class=\\\"token punctuation\\\">.</span>Ale<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Ale</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">case</span> BeerType<span class=\\\"token punctuation\\\">.</span>Stout<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Stout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">case</span> BeerType<span class=\\\"token punctuation\\\">.</span>Lager<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Lager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>However, we’re going to discuss an entirely different use case for Factories: test model instantiation.\\nWe will use factories in our tests to:</p>\\n<ul>\\n<li>Isolate model creation</li>\\n<li>Generate fake data and add entropy to our tests</li>\\n</ul>\\n<p>The idea of using factories for test data is by no means a new concept and is ubiquitous in other communities.\\nHowever, I rarely see their use in .Net projects so, I wanted to write this post to try and make the concept\\nmore relatable and concrete for .Net developers who may not be familiar with this practice.</p>\\n<p>To start let’s consider the following test case that is intended to compute the cost of an item.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">async</span> Task <span class=\\\"token function\\\">GetPrice_Returns_The_Expected_Item_Price</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// arrange</span>\\n    <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShoppingCartItem</span> <span class=\\\"token punctuation\\\">{</span>\\n        Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Beer\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        UnitCost <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5.00</span>m<span class=\\\"token punctuation\\\">,</span>\\n        Quantity <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n        CostType <span class=\\\"token operator\\\">=</span> CostType<span class=\\\"token punctuation\\\">.</span>Count\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> expectedCost <span class=\\\"token operator\\\">=</span> item<span class=\\\"token punctuation\\\">.</span>UnitCost <span class=\\\"token operator\\\">*</span> item<span class=\\\"token punctuation\\\">.</span>Quantity<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> itemCostCalculator <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ItemCostCalculator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// act</span>\\n    <span class=\\\"token keyword\\\">var</span> actualCost <span class=\\\"token operator\\\">=</span> itemCostCalculator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetTotalPrice</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// assert</span>\\n    Assert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Equal</span><span class=\\\"token punctuation\\\">(</span>expectedCost<span class=\\\"token punctuation\\\">,</span> actualCost<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This test seems fine, but it’s very static. Every time it runs it will do the same thing without variation\\nand doesn’t flex the system very much. Alternatively, we could generate random values and manually construct\\nour instance:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShoppingCartItem</span> <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> Guid<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewGuid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"N\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    UnitCost <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">GetRandomDecimal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    Quantity <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">GetRandomInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    CostType <span class=\\\"token operator\\\">=</span> <span class=\\\"token generic-method function\\\">GetRandomEnum<span class=\\\"token punctuation\\\">&lt;</span>CostType<span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This is better because we alter the inputs to our system under test (SUT) on every test run.\\nThe problem with this is that you will have to write code that performs the generation of these random values\\nand you it will not be easily reproducible in the event of a failure\\n(i.e. using <code class=\\\"language-text\\\">Guid</code> for strings is not going to do be reproducible).\\nBut, we can do better.</p>\\n<p>Luckily, others have already done this kind of work for us. Some great projects for .Net are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/bchavez/Bogus\\\">Bogus</a></li>\\n<li><a href=\\\"https://github.com/FakeItEasy/FakeItEasy\\\">FakeItEasy</a></li>\\n<li><a href=\\\"https://github.com/jonwingfield/Faker.Net\\\">Faker.Net</a></li>\\n<li><a href=\\\"https://github.com/nbuilder/nbuilder\\\">NBuilder</a></li>\\n</ul>\\n<p>In this post, I’ll be using Bogus, but you can do the same kinds of things with any of the above packages.</p>\\n<p>So, to begin let’s see an example of how we can create a factory for our <code class=\\\"language-text\\\">ShoppingCartItem</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">using</span> Bogus<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShoppingCartItemFactory</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> List<span class=\\\"token operator\\\">&lt;</span>ShoppingCartItem<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">Get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Faker</span><span class=\\\"token operator\\\">&lt;</span>ShoppingCartItem<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token punctuation\\\">.</span>Commerce<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>UnitCost<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Decimal</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>Quantity<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>Weight<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Decimal</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>CostType<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method function\\\">PickRandom<span class=\\\"token punctuation\\\">&lt;</span>ItemType<span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Generate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Then in our tests we can use our factory:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">async</span> Task <span class=\\\"token function\\\">GetPrice_Returns_The_Expected_Item_Price</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// arrange</span>\\n    <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> ShoppingCartItemFactory<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> units <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>ItemType <span class=\\\"token operator\\\">==</span> ItemType<span class=\\\"token punctuation\\\">.</span>Weighed<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">?</span> item<span class=\\\"token punctuation\\\">.</span>Weight\\n        <span class=\\\"token punctuation\\\">:</span> item<span class=\\\"token punctuation\\\">.</span>Quantity<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> expectedCost <span class=\\\"token operator\\\">=</span> units <span class=\\\"token operator\\\">*</span> item<span class=\\\"token punctuation\\\">.</span>UnitCost<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> itemCostCalculator <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ItemCostCalculator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// act</span>\\n    <span class=\\\"token keyword\\\">var</span> actualCost <span class=\\\"token operator\\\">=</span> itemCostCalculator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetTotalPrice</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// assert</span>\\n    Assert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Equal</span><span class=\\\"token punctuation\\\">(</span>expectedCost<span class=\\\"token punctuation\\\">,</span> actualCost<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>So, we’re now generating fake data that may even resemble some of the actual inputs our system will receive.\\nAnd our test is a little more pleasant to read.\\nBut, what kind of scenarios exist that fake data can actually help us catch?\\nConsider the following requirement:</p>\\n<blockquote>\\n<p>The total cost is the quantity multiplied by the unit cost if the unit is priced by quantity.\\nHowever if the unit is priced by weight, then the total cost is the quantity multiplied by the\\nweight of the unit.</p>\\n</blockquote>\\n<p>Okay so now consider a faulty <code class=\\\"language-text\\\">ItemCostCalculator</code> implementation:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ItemCostCalculator</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">decimal</span> <span class=\\\"token function\\\">GetTotalPrice</span><span class=\\\"token punctuation\\\">(</span>ShoppingCartItem item<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> item<span class=\\\"token punctuation\\\">.</span>Quantity <span class=\\\"token operator\\\">*</span> item<span class=\\\"token punctuation\\\">.</span>UnitCost<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Our original test would have passed every time because we only ever tested the weighted condition.\\nHowever, we will get intermittent failures of our new test, because we expect the calculator to correctly\\ncompute cost based on <code class=\\\"language-text\\\">ItemType</code>. We can now fix our <code class=\\\"language-text\\\">ItemCostCalculator</code> and the test will pass every time.</p>\\n<p>I would like to quickly point out that in this example you <strong>should</strong> write\\nmultiple tests that test both conditions separately. However, the regular\\nuse of fake data generation in tests helps us to catch mistakes like this one.</p>\\n<h2>Reproducing Flaky Tests</h2>\\n<p>One challenge with using generated data is that it can be difficult to reproduce failures locally.\\nSo, the tests may fail during CI, but if you can’t reproduce them consistently then it can be difficult to\\ntrack down root cause. I was recently working with <a href=\\\"https://twitter.com/RyanTablada\\\">Ryan Tablada</a> on this\\nexact issue and the solution he proposed was to use the same random seed for all tests and log that seed\\nat the beginning of the test.\\nHe then allowed the random seed to be set by an environment variable when the test starts.</p>\\n<p>Each test can inherit from a base test fixture that sets the seed in its static constructor.\\nThis will only be called once in a single test run so all tests will use the same seed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ItemCostCalculator_Tests</span> <span class=\\\"token punctuation\\\">:</span> TestFixture <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/*...*/</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestFixture</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> Seed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">TestFixture</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> currentSeed <span class=\\\"token operator\\\">=</span> Bogus<span class=\\\"token punctuation\\\">.</span>Randomizer<span class=\\\"token punctuation\\\">.</span>Seed<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> seedOverride <span class=\\\"token operator\\\">=</span> Environment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetEnvironmentVariable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"TEST_SEED\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Seed <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>seedOverride <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Parse</span><span class=\\\"token punctuation\\\">(</span>seedOverride<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> currentSeed<span class=\\\"token punctuation\\\">;</span>\\n        Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token string\\\">\\\"Using test seed: {Seed}\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Now in the instance constructor, we assign the seed back to the Bogus randomizer.\\nThis will ensure that each individual test runs with the correct seed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestFixture</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> Seed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">TestFixture</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> currentSeed <span class=\\\"token operator\\\">=</span> Bogus<span class=\\\"token punctuation\\\">.</span>Randomizer<span class=\\\"token punctuation\\\">.</span>Seed<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> seedOverride <span class=\\\"token operator\\\">=</span> Environment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetEnvironmentVariable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"TEST_SEED\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Seed <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>seedOverride <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Parse</span><span class=\\\"token punctuation\\\">(</span>seedOverride<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> currentSeed<span class=\\\"token punctuation\\\">;</span>\\n        Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token string\\\">\\\"Using test seed: {Seed}\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">TestFixture</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Randomizer<span class=\\\"token punctuation\\\">.</span>Seed <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Random</span><span class=\\\"token punctuation\\\">(</span>Seed<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>By assigning the seed to the Bogus <code class=\\\"language-text\\\">Randomizer</code> in the instance constructor we can ensure that\\neach individual test within a test run will use the same seed.\\nSo, when we get the intermittent failure described above, we should be able to go to our test log\\nand see something like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Using test seed: 73202934</code></pre>\\n      </div>\\n<p>We can then pull the branch locally and set the environment variable:</p>\\n<p>CMD:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">setx TEST_SEED 73202934</code></pre>\\n      </div>\\n<p>Bash:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">export TEST_SEED=73202934</code></pre>\\n      </div>\\n<p>And then when we re-run the test the model factories will use the same seeds and should generate\\nthe exact same fake data and cause the test to fail again.</p>\\n<h2>Summary</h2>\\n<p>Using test model factories to generate fake data for our unit tests is a good way to increase the coverage\\nof our tests across multiple runs while also providing the added benefit of making our tests more legible.\\nBy adding randomness to our tests we can discover issues that may never be discovered through the use of\\nstatic test data.</p>\\n<h2>What’s Next</h2>\\n<p>In my next post on .Net testing, we’ll cover transactional integration testing.</p>\",\"frontmatter\":{\"title\":\"Leveling Up Your .Net Testing Patterns - Part I\",\"date\":\"March 16, 2019\"}}},\"pathContext\":{\"slug\":\"/leveling-up-your-dotnet-testing/\",\"previous\":{\"fields\":{\"slug\":\"/private-fields-in-javascript/\"},\"frontmatter\":{\"title\":\"Private Fields in Javascript\"}},\"next\":{\"fields\":{\"slug\":\"/building-offline-applications/\"},\"frontmatter\":{\"title\":\"Building Offline Applications with OrbitJS - Part I\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---leveling-up-your-dotnet-testing-4fc04dcfb4e8dbde8faa.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"nance.io\",\"author\":\"Jared Nance\"}},\"markdownRemark\":{\"id\":\"/Users/jarednance/dev/gatsby-blog/src/pages/leveling-up-your-dotnet-testing/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This is a two part blog post in which I’ll describe some techniques you can use to level up your .Net tests.\\nIn part 1 of this series, I’m going to show you how to use model Factories to generate data and introduce entropy\\ninto your tests.</p>\\n<h2>Factories</h2>\\n<p>If you’re not familiar with factories, they are a simple <a href=\\\"https://en.wikipedia.org/wiki/Creational_pattern\\\">creational pattern</a>\\nthat abstract the instantiation process of a type. The simplest form a factory can take is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BeerFactory</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> Beer <span class=\\\"token function\\\">Create</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Beer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The most common use of Factories is to provide a mechanism for the instantiation of different implementations of an\\ninterface that is dependent upon some runtime condition. Often times this takes the form of a switch statement:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BeerFactory</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> IBeer <span class=\\\"token function\\\">Create</span><span class=\\\"token punctuation\\\">(</span>BeerType beerType<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>beerType<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">case</span> BeerType<span class=\\\"token punctuation\\\">.</span>Ale<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Ale</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">case</span> BeerType<span class=\\\"token punctuation\\\">.</span>Stout<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Stout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">case</span> BeerType<span class=\\\"token punctuation\\\">.</span>Lager<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Lager</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// ...</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>However, we’re going to discuss an entirely different use case for Factories: test model instantiation.\\nWe will use factories in our tests to:</p>\\n<ul>\\n<li>Isolate model creation</li>\\n<li>Generate fake data and add entropy to our tests</li>\\n</ul>\\n<p>The idea of using factories for test data is by no means a new concept and is ubiquitous in other communities.\\nHowever, I rarely see their use in .Net projects so, I wanted to write this post to try and make the concept\\nmore relatable and concrete for .Net developers who may not be familiar with this practice.</p>\\n<p>To start let’s consider the following test case that is intended to compute the cost of an item.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">async</span> Task <span class=\\\"token function\\\">GetPrice_Returns_The_Expected_Item_Price</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// arrange</span>\\n    <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShoppingCartItem</span> <span class=\\\"token punctuation\\\">{</span>\\n        Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Beer\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        UnitCost <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5.00</span>m<span class=\\\"token punctuation\\\">,</span>\\n        Quantity <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n        CostType <span class=\\\"token operator\\\">=</span> CostType<span class=\\\"token punctuation\\\">.</span>Count\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> expectedCost <span class=\\\"token operator\\\">=</span> item<span class=\\\"token punctuation\\\">.</span>UnitCost <span class=\\\"token operator\\\">*</span> item<span class=\\\"token punctuation\\\">.</span>Quantity<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> itemCostCalculator <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ItemCostCalculator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// act</span>\\n    <span class=\\\"token keyword\\\">var</span> actualCost <span class=\\\"token operator\\\">=</span> itemCostCalculator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetTotalPrice</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// assert</span>\\n    Assert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Equal</span><span class=\\\"token punctuation\\\">(</span>expectedCost<span class=\\\"token punctuation\\\">,</span> actualCost<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This test seems fine, but it’s very static. Every time it runs it will do the same thing without variation\\nand doesn’t flex the system very much. Alternatively, we could generate random values and manually construct\\nour instance:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ShoppingCartItem</span> <span class=\\\"token punctuation\\\">{</span>\\n    Name <span class=\\\"token operator\\\">=</span> Guid<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">NewGuid</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"N\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    UnitCost <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">GetRandomDecimal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    Quantity <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">GetRandomInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    CostType <span class=\\\"token operator\\\">=</span> <span class=\\\"token generic-method function\\\">GetRandomEnum<span class=\\\"token punctuation\\\">&lt;</span>CostType<span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This is better because we alter the inputs to our system under test (SUT) on every test run.\\nThe problem with this is that you will have to write code that performs the generation of these random values\\nand you it will not be easily reproducible in the event of a failure\\n(i.e. using <code class=\\\"language-text\\\">Guid</code> for strings is not going to do be reproducible).\\nBut, we can do better.</p>\\n<p>Luckily, others have already done this kind of work for us. Some great projects for .Net are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/bchavez/Bogus\\\">Bogus</a></li>\\n<li><a href=\\\"https://github.com/FakeItEasy/FakeItEasy\\\">FakeItEasy</a></li>\\n<li><a href=\\\"https://github.com/jonwingfield/Faker.Net\\\">Faker.Net</a></li>\\n<li><a href=\\\"https://github.com/nbuilder/nbuilder\\\">NBuilder</a></li>\\n</ul>\\n<p>In this post, I’ll be using Bogus, but you can do the same kinds of things with any of the above packages.</p>\\n<p>So, to begin let’s see an example of how we can create a factory for our <code class=\\\"language-text\\\">ShoppingCartItem</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">using</span> Bogus<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ShoppingCartItemFactory</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> List<span class=\\\"token operator\\\">&lt;</span>ShoppingCartItem<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">Get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Faker</span><span class=\\\"token operator\\\">&lt;</span>ShoppingCartItem<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">,</span> f<span class=\\\"token punctuation\\\">.</span>Commerce<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Product</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>UnitCost<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Decimal</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>Quantity<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>Weight<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Decimal</span><span class=\\\"token punctuation\\\">(</span>min<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">RuleFor</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> i<span class=\\\"token punctuation\\\">.</span>CostType<span class=\\\"token punctuation\\\">,</span> f <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> f<span class=\\\"token punctuation\\\">.</span>Random<span class=\\\"token punctuation\\\">.</span><span class=\\\"token generic-method function\\\">PickRandom<span class=\\\"token punctuation\\\">&lt;</span>ItemType<span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Generate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Then in our tests we can use our factory:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">async</span> Task <span class=\\\"token function\\\">GetPrice_Returns_The_Expected_Item_Price</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// arrange</span>\\n    <span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> ShoppingCartItemFactory<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> units <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">.</span>ItemType <span class=\\\"token operator\\\">==</span> ItemType<span class=\\\"token punctuation\\\">.</span>Weighed<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">?</span> item<span class=\\\"token punctuation\\\">.</span>Weight\\n        <span class=\\\"token punctuation\\\">:</span> item<span class=\\\"token punctuation\\\">.</span>Quantity<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> expectedCost <span class=\\\"token operator\\\">=</span> units <span class=\\\"token operator\\\">*</span> item<span class=\\\"token punctuation\\\">.</span>UnitCost<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> itemCostCalculator <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ItemCostCalculator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// act</span>\\n    <span class=\\\"token keyword\\\">var</span> actualCost <span class=\\\"token operator\\\">=</span> itemCostCalculator<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetTotalPrice</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// assert</span>\\n    Assert<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Equal</span><span class=\\\"token punctuation\\\">(</span>expectedCost<span class=\\\"token punctuation\\\">,</span> actualCost<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>So, we’re now generating fake data that may even resemble some of the actual inputs our system will receive.\\nAnd our test is a little more pleasant to read.\\nBut, what kind of scenarios exist that fake data can actually help us catch?\\nConsider the following requirement:</p>\\n<blockquote>\\n<p>The total cost is the quantity multiplied by the unit cost if the unit is priced by quantity.\\nHowever if the unit is priced by weight, then the total cost is the quantity multiplied by the\\nweight of the unit.</p>\\n</blockquote>\\n<p>Okay so now consider a faulty <code class=\\\"language-text\\\">ItemCostCalculator</code> implementation:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ItemCostCalculator</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">decimal</span> <span class=\\\"token function\\\">GetTotalPrice</span><span class=\\\"token punctuation\\\">(</span>ShoppingCartItem item<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> item<span class=\\\"token punctuation\\\">.</span>Quantity <span class=\\\"token operator\\\">*</span> item<span class=\\\"token punctuation\\\">.</span>UnitCost<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Our original test would have passed every time because we only ever tested the weighted condition.\\nHowever, we will get intermittent failures of our new test, because we expect the calculator to correctly\\ncompute cost based on <code class=\\\"language-text\\\">ItemType</code>. We can now fix our <code class=\\\"language-text\\\">ItemCostCalculator</code> and the test will pass every time.</p>\\n<p>I would like to quickly point out that in this example you <strong>should</strong> write\\nmultiple tests that test both conditions separately. However, the regular\\nuse of fake data generation in tests helps us to catch mistakes like this one.</p>\\n<h2>Reproducing Flaky Tests</h2>\\n<p>One challenge with using generated data is that it can be difficult to reproduce failures locally.\\nSo, the tests may fail during CI, but if you can’t reproduce them consistently then it can be difficult to\\ntrack down root cause. I was recently working with <a href=\\\"https://twitter.com/RyanTablada\\\">Ryan Tablada</a> on this\\nexact issue and the solution he proposed was to use the same random seed for all tests and log that seed\\nat the beginning of the test.\\nHe then allowed the random seed to be set by an environment variable when the test starts.</p>\\n<p>Each test can inherit from a base test fixture that sets the seed in its static constructor.\\nThis will only be called once in a single test run so all tests will use the same seed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ItemCostCalculator_Tests</span> <span class=\\\"token punctuation\\\">:</span> TestFixture <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/*...*/</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestFixture</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> Seed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">TestFixture</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> currentSeed <span class=\\\"token operator\\\">=</span> Bogus<span class=\\\"token punctuation\\\">.</span>Randomizer<span class=\\\"token punctuation\\\">.</span>Seed<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> seedOverride <span class=\\\"token operator\\\">=</span> Environment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetEnvironmentVariable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"TEST_SEED\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Seed <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>seedOverride <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Parse</span><span class=\\\"token punctuation\\\">(</span>seedOverride<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> currentSeed<span class=\\\"token punctuation\\\">;</span>\\n        Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token string\\\">\\\"Using test seed: {Seed}\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Now in the instance constructor, we assign the seed back to the Bogus randomizer.\\nThis will ensure that each individual test runs with the correct seed.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TestFixture</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">int</span> Seed<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">TestFixture</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> currentSeed <span class=\\\"token operator\\\">=</span> Bogus<span class=\\\"token punctuation\\\">.</span>Randomizer<span class=\\\"token punctuation\\\">.</span>Seed<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">var</span> seedOverride <span class=\\\"token operator\\\">=</span> Environment<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">GetEnvironmentVariable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"TEST_SEED\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        Seed <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>seedOverride <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Parse</span><span class=\\\"token punctuation\\\">(</span>seedOverride<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> currentSeed<span class=\\\"token punctuation\\\">;</span>\\n        Console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">WriteLine</span><span class=\\\"token punctuation\\\">(</span>$<span class=\\\"token string\\\">\\\"Using test seed: {Seed}\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">TestFixture</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        Randomizer<span class=\\\"token punctuation\\\">.</span>Seed <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Random</span><span class=\\\"token punctuation\\\">(</span>Seed<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>By assigning the seed to the Bogus <code class=\\\"language-text\\\">Randomizer</code> in the instance constructor we can ensure that\\neach individual test within a test run will use the same seed.\\nSo, when we get the intermittent failure described above, we should be able to go to our test log\\nand see something like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Using test seed: 73202934</code></pre>\\n      </div>\\n<p>We can then pull the branch locally and set the environment variable:</p>\\n<p>CMD:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">setx TEST_SEED 73202934</code></pre>\\n      </div>\\n<p>Bash:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">export TEST_SEED=73202934</code></pre>\\n      </div>\\n<p>And then when we re-run the test the model factories will use the same seeds and should generate\\nthe exact same fake data and cause the test to fail again.</p>\\n<h2>Summary</h2>\\n<p>Using test model factories to generate fake data for our unit tests is a good way to increase the coverage\\nof our tests across multiple runs while also providing the added benefit of making our tests more legible.\\nBy adding randomness to our tests we can discover issues that may never be discovered through the use of\\nstatic test data.</p>\\n<h2>What’s Next</h2>\\n<p>In my next post on .Net testing, we’ll cover transactional integration testing.</p>\",\"frontmatter\":{\"title\":\"Leveling Up Your .Net Testing Patterns - Part I\",\"date\":\"March 16, 2019\"}}},\"pathContext\":{\"slug\":\"/leveling-up-your-dotnet-testing/\",\"previous\":{\"fields\":{\"slug\":\"/private-fields-in-javascript/\"},\"frontmatter\":{\"title\":\"Private Fields in Javascript\"}},\"next\":{\"fields\":{\"slug\":\"/building-offline-applications/\"},\"frontmatter\":{\"title\":\"Building Offline Applications with OrbitJS - Part I\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/leveling-up-your-dotnet-testing.json\n// module id = 524\n// module chunks = 163616910017581"],"sourceRoot":""}