webpackJsonp([70179299880030],{550:function(n,s){n.exports={data:{site:{siteMetadata:{title:"nance.io",author:"Jared Nance"}},markdownRemark:{id:"/Users/jarednance/dev/gatsby-blog/src/pages/leveling-up-your-dotnet-testing-transactional-integration-testing-in-asp-net-core/index.md absPath of file >>> MarkdownRemark",html:'<p>In <a href="http://nance.io/leveling-up-your-dotnet-testing/">part 1</a> of this blog post, I introduced a few testing patterns.\nSpecifically I showed how you can use factories to generate fake data and create randomness in our tests.\nThis can improve the coverage of possible input parameters and possibly expose unexpected application bugs.</p>\n<p>In this post we’ll be moving on to integration testing.\nI’ll show a few options for making our integration tests idempotent even in the face of concurrent execution.\nAlmost all of the examples below will be using <a href="https://github.com/aspnet/EntityFrameworkCore">Entity Framework Core</a>.\nAt the end I’ll quickly show how the same principles can be applied using any data access layer that provides\n<code class="language-text">IDbTransaction</code> capabilities, such as <a href="https://github.com/StackExchange/Dapper">Dapper</a>.</p>\n<p>I’ll be using <a href="https://xunit.github.io/">xUnit</a> for the testing framework.\nHowever, you should be able to do these same things with other frameworks by using the APIs they provide to share test between tests.</p>\n<center><a href="https://github.com/jaredcnance/TransactionalTests" target="_blank">Skip to the example repo</a></center>\n<p>An integration test is one that tests multiple layers of our application, often times extending all the way to the data persistence layer.\nThe following is an example of an integration test that verifies an <code class="language-text">ArticleService</code> can fetch all articles from the database.\nTo do this, we need to first create some articles to query.</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>Fact<span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">GetAllAsync_Returns_All_Articles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// arrange</span>\n    <span class="token keyword">var</span> expectedArticleCount <span class="token operator">=</span> _faker<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> expectedArticles <span class="token operator">=</span> ArticleFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>expectedArticleCount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    DbContext<span class="token punctuation">.</span>Articles<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>expectedArticles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> DbContext<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleService</span><span class="token punctuation">(</span>DbContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// act</span>\n    <span class="token keyword">var</span> actualArticles <span class="token operator">=</span> <span class="token keyword">await</span> service<span class="token punctuation">.</span><span class="token function">GetAllAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// assert</span>\n    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expectedArticleCount<span class="token punctuation">,</span> actualArticles<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The problem with this test is that it <strong>assumes the database is empty</strong>.\nIf there are other tests concurrently accessing the database, this is unlikely to be true.\nAt a minimum, there is the possibility that other tests might occasionally invalidate\nthat assumption causing the test to act “flaky”.</p>\n<h2>Option 1: Serial Execution</h2>\n<p>One naïve option is to force serial execution of the tests and make sure each test cleans up after itself.\nGenerally, to avoid a lot of cleanup code, a test fixture may just drop and re-create the database on\nevery run. However, as your number of tests increases, this will get painfully slow\neven if your tests are run asynchronously from your development workflow via a build server.\nAlso, this encourages the poor habit of not running tests locally.</p>\n<h2>Option 2: In Memory Databases</h2>\n<p>If you’re using Entity Framework, a good option is using the <code class="language-text">Microsoft.EntityFrameworkCore.InMemory</code>\npackage for running your database. You just need to be aware that it limits\nthe scope of what is actually being tested. Some of these limitations have been\n<a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/in-memory">enumerated in the docs</a>.</p>\n<blockquote>\n<ul>\n<li>\n<p>InMemory will allow you to save data that would violate referential integrity constraints in a relational database.</p>\n</li>\n<li>\n<p>If you use DefaultValueSql(string) for a property in your model, this is a relational database API and will have no effect when running against InMemory.</p>\n</li>\n</ul>\n</blockquote>\n<p>In addition to these limitations, you may run into issues if your models depend on provider specific data types or constraints.\nFor example, a PostgreSQL specific column type, will not be handled by the in memory provider and is unlikely to expose data type related issues.\nConsider the following model property:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Column</span><span class="token punctuation">(</span>TypeName <span class="token operator">=</span> <span class="token string">"int2"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> Ordinal <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>I have defined a column type of <code class="language-text">int2</code> (16 bit integer) but declared the .Net type to be <code class="language-text">int</code> (32 bit integer).\nThe in-memory provider will be unable to detect truncation issues since it has no way to determine what <code class="language-text">int2</code> means.\nSo, your tests may pass, but you are at risk for hitting errors such as this one in production:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text"> Microsoft.EntityFrameworkCore.DbUpdateException : An error occurred while updating the entries. See the inner exception for details.\n---- System.OverflowException : Value was either too large or too small for an Int16.</code></pre>\n      </div>\n<p>Other limitations include the lack of support for relational APIs such as migrations and transactions.</p>\n<h2>Option 3: Transactional Testing</h2>\n<p>The alternative that I would like to propose is transactional testing.\nTransactional tests are tests that get wrapped in a database transaction and are rolled back when the test completes.\nWe can run our tests in an isolated <a href="https://docs.microsoft.com/en-us/ef/core/saving/transactions">Entity Framework transaction</a>.\nAn example transaction might look like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">try</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// do some work that requires calling SaveChanges multiple times...</span>\n        transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The call to <a href="https://github.com/aspnet/EntityFrameworkCore/blob/1d2178f38d231599b53f899af498107fc1db39d9/src/EFCore.Relational/Storage/RelationalConnection.cs#L246"><code class="language-text">BeginTransaction</code></a>\nwill begin an <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/local-transactions">ADO.NET transaction</a>\nand subsequent calls to <code class="language-text">SaveChanges</code> will use the open transaction.\nWhen the <code class="language-text">DbContext</code> is disposed it will rollback the transaction if it has not already been committed.</p>\n<p>Wrapping integration tests in transactions is not a new concept and it comes out-of-the-box <a href="https://github.com/rails/rails/commit/903ef71b9952f4bfaef798bbd93a972fc25010ad">in Rails</a>,\n<a href="https://hexdocs.pm/phoenix/testing.html">Phoenix</a> and I’m sure other frameworks as well.\nHowever, since .Net is much less opinionated than these frameworks, it’s not reasonable to expect this to be a built-in feature (yet :fingers_crossed:).</p>\n<p>Let’s take a look at the simplest use of transactions in integration tests.\nWe’re going to test that an <code class="language-text">ArticleService</code> persists data to the database:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">CreateAsync_Persists_Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">try</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// arrange</span>\n            <span class="token keyword">var</span> article <span class="token operator">=</span> ArticleFactory<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArticleService</span><span class="token punctuation">(</span>_dbContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// act</span>\n            <span class="token keyword">await</span> service<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will call _dbContext.SaveChanges();</span>\n\n            <span class="token comment">// assert</span>\n            <span class="token keyword">var</span> dbArticle <span class="token operator">=</span> <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span>Articles<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Assert<span class="token punctuation">.</span><span class="token function">NotNull</span><span class="token punctuation">(</span>dbArticle<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">finally</span>\n        <span class="token punctuation">{</span>\n            transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>By using the transaction, we can ensure that the changes to the <code class="language-text">DbContext</code> are rolled back upon test completion.\nSQLServer, PostgreSQL and Oracle 11g all use\n<a href="https://www.postgresql.org/docs/9.5/static/transaction-iso.html">Read Committed isolation</a> by default.\nWhat this means is that the changes within this transaction will not be visible to other concurrent transactions.</p>\n<h2>Fixtures</h2>\n<p>At this point, we have a strategy testing our database-dependent services without having to mock the database provider.\nHowever, it would be pretty annoying if we had to wrap all our tests in this transactional boilerplate.</p>\n<p><strong>Enter fixtures</strong></p>\n<p>We can use fixtures to get the boilerplate out of the way.\nIn xUnit, fixtures can be created through inheritance since each test is run using a new instance of the test class.\nHere is an example where we create a transaction in an inherited fixture that implements <code class="language-text">IDisposable</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbContextFixture</span> <span class="token punctuation">:</span> IDisposable\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> IDbContextTransaction Transaction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">protected</span> AppDbContext DbContext <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token function">DbContextFixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// configure our database</span>\n        <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DbContextOptionsBuilder</span><span class="token operator">&lt;</span>AppDbContext<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span>Options<span class="token punctuation">;</span>\n\n        DbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppDbContext</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// begin the transaction</span>\n        Transaction <span class="token operator">=</span> DbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Transaction<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">:</span> DbContextFixture <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>When our test gets disposed, the transaction will be rolled back.</p>\n<h2>Transactions Using ASP.Net Core TestServer</h2>\n<p>Things get a little more interesting when we decide to run end-to-end tests.\nASP.Net Core has a set of APIs that you can use – available in the <code class="language-text">Microsoft.AspNetCore.TestHost</code> package –\nto create an in memory web server.\nThis allows you to validate your entire web application (serializers, routing, controllers, services, etc.) in your tests.\nThis is a fantastic way to write E2E application tests.</p>\n<p>An example fixture for web services might look like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebFixture</span><span class="token operator">&lt;</span>TStartup<span class="token operator">></span> <span class="token punctuation">:</span> IDisposable <span class="token keyword">where</span> TStartup <span class="token punctuation">:</span> <span class="token keyword">class</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> TestServer _server<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IServiceProvider _services<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IDbContextTransaction _transaction<span class="token punctuation">;</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">readonly</span> HttpClient Client<span class="token punctuation">;</span>\n    <span class="token keyword">protected</span> AppDbContext DbContext <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token function">WebFixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> builder <span class="token operator">=</span> WebHost<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token generic-method function">UseStartup<span class="token punctuation">&lt;</span>TStartup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// construct the test server and client we\'ll use to</span>\n        <span class="token comment">// send requests</span>\n        _server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestServer</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Client <span class="token operator">=</span> _server<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _services <span class="token operator">=</span> _server<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Services<span class="token punctuation">;</span>\n\n        <span class="token comment">// resolve a DbContext instance from the container</span>\n        <span class="token comment">// and begin a transaction on the context.</span>\n        DbContext <span class="token operator">=</span> <span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>AppDbContext<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _transaction <span class="token operator">=</span> DbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> T <span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>_services<span class="token punctuation">.</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            _transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            _transaction<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>And then our test can use the fixture to send requests to the server.</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Articles_Tests</span> <span class="token punctuation">:</span> WebFixture<span class="token operator">&lt;</span>TestStartup<span class="token operator">></span>\n<span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>Fact<span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token keyword">async</span> <span class="token function">Can_Get_Articles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// arrange</span>\n        <span class="token keyword">var</span> expectedArticles <span class="token operator">=</span> _faker<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> articles <span class="token operator">=</span> ArticleFactory<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>expectedArticles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        DbContext<span class="token punctuation">.</span>Articles<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>articles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">await</span> DbContext<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">const</span> <span class="token keyword">string</span> route <span class="token operator">=</span> $<span class="token string">"api/v1/articles"</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// act</span>\n        <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> Client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// assert</span>\n\n        <span class="token comment">// Generally, I prefer checking the status code first,</span>\n        <span class="token comment">// since an error response may result in an exception during/after</span>\n        <span class="token comment">// de-serialization. Knowing the returned status code is more helpful</span>\n        <span class="token comment">// than an ambiguous exception thrown after failed de-serialization</span>\n        Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// I like to move de-serialization into the fixture since the process</span>\n        <span class="token comment">// doesn\'t change much and is just boilerplate.</span>\n        <span class="token comment">// DeserializeAsync&lt;T> might look like:</span>\n        <span class="token comment">//</span>\n        <span class="token comment">// var json = await response.Content.ReadAsStringAsync();</span>\n        <span class="token comment">// return JsonConvert.DeserializeObject&lt;T>(json);</span>\n        <span class="token keyword">var</span> deserializedArticles <span class="token operator">=</span> <span class="token keyword">await</span> DeserializeAsync<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Article<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expectedArticles<span class="token punctuation">,</span> deserializedArticles<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>However, we’re going to have a problem because if you have properly defined the\n<code class="language-text">AppDbContext</code> DI registration scope as <code class="language-text">Scoped</code>, then the instance that is accessed\nby the test will be different than the instance used by the web server and they will not\nshare a transaction scope.</p>\n<p>In other words, the web server will return an empty set because it is unaware of the <code class="language-text">Articles</code> created in the currently uncommitted test transaction.\nTo handle this, we can create a new <code class="language-text">TestStartup</code> class that registers the <code class="language-text">AppDbContext</code> as a singleton.\nRemember, that this is not an implementation of a traditional <a href="http://csharpindepth.com/Articles/General/Singleton.aspx">singleton pattern in C#</a>.\nIn this context the term “singleton” just means that any lookups on the <strong>same container instance</strong> will receive the same <strong>service instance</strong>.\nThis means transaction isolation is preserved between tests as long as tests do not share a <code class="language-text">TestServer</code> instance even if they run in the same process.</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStartup</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        services<span class="token punctuation">.</span><span class="token generic-method function">AddSingleton<span class="token punctuation">&lt;</span>DbContext<span class="token punctuation">,</span> AppDbContext<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Creating the Database</h2>\n<p>Finally, we need to make sure the database is created and all migrations have been applied.\nTo avoid a performance hit, we only want to run <code class="language-text">DbContext.Database.Migrate()</code> once.\nOne way to do this is to add one more fixture to our inheritance hierarchy that creates the database once in its static\nconstructor:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fixture</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token function">Fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DbContextOptionsBuilder</span><span class="token operator">&lt;</span>AppDbContext<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span>Options<span class="token punctuation">;</span>\n        <span class="token keyword">new</span> <span class="token class-name">AppDbContext</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebFixture</span><span class="token operator">&lt;</span>TStartup<span class="token operator">></span> <span class="token punctuation">:</span> Fixture<span class="token punctuation">,</span>\n    IDisposable\n    <span class="token keyword">where</span> TStartup <span class="token punctuation">:</span> <span class="token keyword">class</span>\n<span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Articles_Tests</span> <span class="token punctuation">:</span> WebFixture<span class="token operator">&lt;</span>TestStartup<span class="token operator">></span>\n<span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Not Using Entity Framework?</h2>\n<p>As long as you’re using an ORM or data access layer that can create transactions, this is no problem.\nHere is what your fixture might look like if you’re using Dapper:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DapperFixture</span> <span class="token punctuation">:</span> Fixture<span class="token punctuation">,</span> IDisposable\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">DapperFixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NpgsqlConnection</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">[</span><span class="token string">"DbConnection"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Transaction <span class="token operator">=</span> Connection<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> IDbConnection Connection <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">protected</span> IDbTransaction Transaction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>Transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Transaction<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Connection<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>This requires your application to be structured in such a way that you can substitute an <code class="language-text">IDbConnection</code>.\nIf you’re using the repository pattern, an example might look like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleRepository</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IDbConnection _dbConnection<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token function">ArticleRepository</span><span class="token punctuation">(</span>IDbConnection dbConnection<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _dbConnection <span class="token operator">=</span> dbConnection<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Article<span class="token operator">></span><span class="token operator">></span> <span class="token function">GetArticlesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">await</span> _dbConnection<span class="token punctuation">.</span><span class="token generic-method function">GetAllAsync<span class="token punctuation">&lt;</span>Article<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>In this case, you’d be able to test the <code class="language-text">ArticleRepository</code> directly by constructing it with an instance\nof <code class="language-text">DapperFixture.Connection</code> which will be wrapped in a transaction.</p>\n<h2>Summary</h2>\n<p>With the solutions provided above, you’ll be able to write transactional integration tests that run in isolation\nand reduce the amount of cleanup code you’ll be required to write.\nThere is also a huge performance benefit if you’ve been dropping and re-creating your databases between test runs\nsince the database only has to be created once.\nI’ve provided a full example that uses <a href="https://github.com/jaredcnance/TransactionalTests/blob/master/test/WebAppTests/AcceptanceTests/Articles_Tests.cs">Entity Framework</a>\nand also one that uses\n<a href="https://github.com/jaredcnance/TransactionalTests/blob/master/test/WebAppTests/IntegrationTests/ArticleRepository_Tests.cs">Dapper</a> in the\n<a href="https://github.com/jaredcnance/TransactionalTests">corresponding GitHub repository</a>.</p>',
frontmatter:{title:"Leveling Up Your .Net Testing Patterns - Part II Transactional Integration Testing",date:"April 14, 2018",description:"Increase performance, reduce boilerplate, and improve DX through transactional integration testing. Working examples included."}}},pathContext:{slug:"/leveling-up-your-dotnet-testing-transactional-integration-testing-in-asp-net-core/",previous:{fields:{slug:"/leveling-up-your-dotnet-testing/"},frontmatter:{title:"Leveling Up Your .Net Testing Patterns - Part I"}},next:{fields:{slug:"/a-better-story-for-asp-net-core-integration-testing/"},frontmatter:{title:"A Better Story for Asp.Net Core Integration Testing"}}}}}});
//# sourceMappingURL=path---leveling-up-your-dotnet-testing-transactional-integration-testing-in-asp-net-core-bfaeee4c2f69251542aa.js.map